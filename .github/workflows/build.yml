name: Build Brunch using Github Actions
on:
  push:
    branches:
      - main
concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true
jobs:
  prepare-kernels:
    name: Prepare Kernels
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Brunch source code
        uses: actions/checkout@v2
      - name: Download kernels and apply patches
        run: ./prepare_kernels.sh
      - name: Define kernels matrix
        id: kernels
        run: echo "::set-output name=matrix::$(ls kernels/ | jq -R -s -c 'split("\n")[:-1]')"
      - name: Compress kernels source files
        run: tar zcvf /tmp/kernels-source.tar.gz kernels
      - name: Upload kernels source
        uses: actions/upload-artifact@v2
        with:
          name: kernels-source
          path: /tmp/kernels-source.tar.gz
          if-no-files-found: error
  build-kernels:
    name: Build Kernels
    needs: prepare-kernels
    runs-on: ubuntu-latest
    strategy:
        matrix:
            kernel: ${{ fromJson(needs.prepare-kernels.outputs.matrix) }}
    steps:
      - name: Checkout Brunch source code
        uses: actions/checkout@v2
      - name: Install Secure Boot certificate
        env:
          BRUNCHPRIV: ${{ secrets.BRUNCHPRIV }}
          BRUNCHPEM: ${{ secrets.BRUNCHPEM }}
        run: |
          sudo ln -s $RUNNER_TEMP /persist
          mkdir /persist/keys
          echo "$BRUNCHPRIV" | base64 -d > /persist/keys/brunch.priv
          echo "$BRUNCHPEM" | base64 -d > /persist/keys/brunch.pem
      - name: Download kernels source
        uses: actions/download-artifact@v2
        with:
          name: kernels-source
          path: /tmp
      - name: Extract kernels source files
        run: |
          tar -zxf /tmp/kernels-source.tar.gz
          rm -f /tmp/kernels-source.tar.gz
      - name: Install dependencies
        run: sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get -y install libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf sbsigntool
      - name: Build kernels
        run: ./build_kernels.sh ${{ matrix.kernel }}
      - name: Clear keys
        run: rm -r /persist/keys
      - name: Compress built kernel
        run: tar zcvf /tmp/kernel-${{ matrix.kernel }}.tar.gz kernels/${{ matrix.kernel }}
      - name: Upload kernels source
        uses: actions/upload-artifact@v2
        with:
          name: built-kernel-${{ matrix.kernel }}
          path: /tmp/built-kernel-${{ matrix.kernel }}.tar.gz
          if-no-files-found: error
  build-brunch:
    name: Build Brunch
    needs: build-kernels
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Brunch source code
        uses: actions/checkout@v2
      - name: Download built kernels
        uses: actions/download-artifact@v2
        with:
          name: built-kernel-*
          path: /tmp
      - name: Copy built kernels
        run: |
          for file in /tmp/built-kernel-*.tar.gz
          do
            tar zxvf $file
            rm -f $file
          done
      - name: Build brunch
        run: sudo bash build_brunch.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: brunch-artifact
          path: out/brunch_*.tar.gz
          if-no-files-found: error
  release:
    name: Make a Brunch release
    permissions:
      contents: write
    needs: build-brunch
    runs-on: ubuntu-latest
    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v2
        with:
          name: brunch-artifact
          path: artifacts
      - name: Get build tag from brunch tar.gz file
        run: |
          RELEASE_FILE=$(find artifacts/ -name 'brunch_*.tar.gz')
          echo "Found brunch release: ${{ env.RELEASE_FILE }}"
          RELEASE_VERSION=$(echo "$BRUNCH_FILE" | cut -d'_' -f2)
          RELEASE_DATE=$(echo "$BRUNCH_FILE" | cut -d'_' -f3)
          echo "RELEASE_FILE=$RELEASE_FILE" >> $GITHUB_ENV
          echo "RELEASE_TAG=\"$RELEASE_VERSION-unstable-$RELEASE_DATE\"" >> $GITHUB_ENV
          echo "RELEASE_NAME=\"Brunch $RELEASE_VERSION unstable $RELEASE_DATE\"" >> $GITHUB_ENV          
      - name: Calculate (and echo) checksum of generated file
        run: |
          sha256sum ${{ env.RELEASE_FILE }} > ${{ env.RELEASE_FILE }}.sha256
          echo "Generated SHA256SUM:" && cat ${{ env.RELEASE_FILE }}.sha256
      - name: Create a release and upload artifacts as assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.RELEASE_FILE }},${{ env.RELEASE_FILE }}.sha256"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          tag: "${{ env.RELEASE_TAG }}"
          name: "${{ env.RELEASE_NAME }}"
          commit: ${{ github.ref_name }}
          body: "Built branch `${{ github.ref_name }}` on commit ${{ github.sha }}. Full compilation log at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}."
